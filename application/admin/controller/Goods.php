<?php


namespace app\admin\controller;


use think\Db;
use fast\Tree;
use think\Exception;

/**
 * 商品管理，商品分类管理
 * Class Goods
 * @package app\admin\controller
 */
class Goods extends Base
{
    const PAGESIZE=15;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 商品列表
     */
    public function index(){
        if(request()->isPost()) {
            $page_size = input("page_size", self::PAGESIZE);
            $map = [];
            $cate_id = input("cate_id", 0);
            $status = input("status",0,"int");
            $issku = input("issku",0, "int");
            if ($cate_id > 0) {
                $map["g.cate_id"] = ["eq", $cate_id];
            }

            if(in_array($status,[1,2])){
                $map["g.status"] = ["eq",$status];
            }
            if(in_array($issku,[1,2])){
                $map["g.issku"] = ["eq",$issku];
            }
            $count = Db::name("goods")->alias('g')
                ->join('ke_goods_category c', 'c.id=g.cate_id', 'left')
                ->where($map)
                ->count();
            $list = Db::name("goods")->alias('g')
                ->join('goods_category c', 'c.id=g.cate_id', 'left')
                ->where($map)
                ->field("g.*,c.name as cate_name")
                ->order("weigh desc")
                ->paginate($page_size, false, ["query" => input()]);
            $data = $list->items();
            foreach ($data as $k => $v) {
                $data[$k]['create_time'] = d($v['create_time']);
                $data[$k]['update_time'] = d($v['update_time']);
            }
            echo json_encode(array("code" => 0, 'data' => $data, 'message' => '成功', 'count' => $count));
        }else{
            $cat_list = $this->_getCategory(0,true);
            $this -> assign("cat_list",$cat_list);
            return view("index");
        }
    }

    /**
     * 编辑商品
     * 添加wdl_  不鉴权
     * @param int $ids
     */
    public function wdl_edit(){
        if(request()->isPost()) {
            $id = input("id",0,"int");
            $cate_id = input("cate_id",0,"int");
            $name = input("name","");
            $lname = input("lname","");
            $price = input("price","");
            $mark_price = input("mark_price","");
            $image = input("image","");
            $images = input("images","");
            $brand = input("brand","");
            $spec = input("spec","");
            $kucun = input("kucun","");
            $content = input("content","");
            $weigh = input("weigh","10");
            $status = input("status","2", "int");
            $issku = input("issku",2,"int");
            $sku_data = input("sku-data","");
            //数据校验
            //....
            if($issku == 1 && empty($sku_data)){
                $this->error("sku信息不能为空");
            }
            $temp_array = compact("id","cate_id","name","lname","price","mark_price","image","images","brand","spec","kucun","content","weigh","issku","status");
            Db::startTrans();
            try {
                $ret = Db::name("goods")->strict(false)->update($temp_array);
                if($ret === false) {
                    throw new Exception("修改失败, 数据更新失败");
                }
                if($issku == 1){
                    $ret2 = $this->_updateSkuData($sku_data,$id);
                }else{
                    $ret2 = Db::name("goods_category")->where("goods_id", $id)->delete();
                }
                if($ret2 === false){
                    throw new Exception("更新规格信息失败");
                }
                Db::commit();
                $this->success("修改成功");
            }catch (Exception $e){
                Db::rollback();
                $this->error("修改失败"); //$e->getMessage();
            }

        }else {
            $ids = input("id", "0", "int");
            $row = Db::name("goods")->alias('g')
                ->join('ke_goods_category c', 'c.id=g.cate_id', 'left')
                ->where('g.id', $ids)
                ->field("g.*,c.name as cate_name")
                ->find();
            if($row["issku"]==1){
                $row["sku-data"] = Db::name("goods_sku")->where("goods_id",$row["id"])->field("name,price,mark_price,image,kucun,status")->select();
            }else{
                $row["sku-data"] = [];
            }
            $cat_list = $this->_getCategory(0, true);
            $this->assign("cat_list", $cat_list);
            $this->assign("row", $row);
            return view('wdl_edit');
        }
    }

    /**
     * 删除商品
     * 添加wdl_  不鉴权
     * @param int $ids
     */
    public function wdl_del(){
        $ids = input("id","0","int");
        $ret = Db::name("goods")->where("id", $ids)->delete();
        if ($ret) {
            $this->success('删除成功');
        } else {
            $this->error('删除失败');
        }
    }

    /**
     * 添加商品
     * 添加wdl_  不鉴权
     */
    public function wdl_add(){
        if(request()->isPost()){
            $cate_id = input("cate_id",0,"int");
            $name = input("name","");
            $lname = input("lname","");
            $price = input("price","");
            $mark_price = input("mark_price","");
            $image = input("image","");
            $images = input("images","");
            $brand = input("brand","");
            $spec = input("spec","");
            $kucun = input("kucun","");
            $content = input("content","");
            $weigh = input("weigh","10");
            $status = input("status","2", "int");
            $issku = input("issku",2, "int");
            $sku_data = input("sku-data","");
            //数据校验
            //....检查同名商品
            $info = Db::name("goods")->where("name",$name)->find();
            if(!empty($info)){
                $this->error("商品名已被占用，请修改后重试");
            }

            $temp_array = compact("cate_id","name","lname","price","mark_price","image","images","brand","spec","kucun","content","weigh","status","issku");
            $temp_array["create_time"]  = time();
            Db::startTrans();
            try{
                $ret = Db::name("goods")->insertGetId($temp_array);
                if($ret===false){
                    throw new Exception("更新主表数据失败");
                }
                if($issku == 1){
                    $ret2 = $this->_updateSkuData($sku_data, $ret);
                    if($ret2 === false){
                        throw new Exception("更新规格信息失败");
                    }
                }
                Db::commit();
                $this->success("添加成功");
            }catch (Exception $e){
                Db::rollback();
                $this->error('添加失败，请稍后重试！');
            }

        }else{
            $cat_list = $this->_getCategory(0,true);
            $this->assign("cat_list",$cat_list);
            return view("wdl_add");
        }
    }

    /**
     * 商品分类
     * @return \think\response\View
     */
    public function wdl_cate(){
        if(request()->isPost()){
            $data = Db::name('goods_category')->order('weigh desc')->select();
            if($data){
                foreach($data as $k=>$v){
                    $data[$k]['create_time'] =  d($v["create_time"]);
                    $data[$k]['goods_count'] =  Db::name('goods')->where('cate_id',$v['id'])->count();
                    $data[$k]['pid_text'] =  Db::name('goods_category')->where('id',$v['pid'])->value("name",'--');
                }
            }
            $tree = Tree::instance();
            $tree->init(collection($data)->toArray(), 'pid');
            $list = $tree->getTreeList($tree->getTreeArray(0), 'name');
            foreach ($list as &$item) {
//                $item = str_replace('&nbsp;', ' ', $item);
            }
            unset($item);
            echo json_encode(array("code"=>0,'data'=>$list,'message'=>'成功','count'=>count($data)));
        }else {
            return view('cate');
        }
    }

    /**
     * 修改商品分类
     * @return \think\response\View
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     */
    public function wdl_cate_edit(){
        if(request()->isPost()){
            $id=input("id",0,"int");
            $name=input("name","");
            $pid=input("pid",0);
            $icon=input("icon","");
            /** 字段安全过滤 $temp_array */
            //....

            $temp_array = compact("id","name","pid","icon");
            $ret = Db::name("goods_category")->update($temp_array);
            if($ret){
                $this->success("修改分类成功");
            }else{
                $this->error("修改分类失败");
            }
        }else {
            $ids = input("id", 0, "int");
            $row = Db::name("goods_category")->find($ids);
            $cat_list = $this->_getCategory(0, true);
            $this->assign("cat_list", $cat_list);
            $this->assign("row", $row);
            return view("wdl_cate_edit");
        }
    }

    /**
     * 添加商品分类
     */
    public function wdl_cate_add(){
        if($this->request->isPost()) {
            $name = input("name", "");
            $pid = input("pid", 0);
            $icon = input("icon", "");
            /** 字段安全过滤 $temp_array */
            //....

            $temp_array = compact("name", "pid", "icon");
            $temp_array["create_time"] = time();
            $ret = Db::name("goods_category")->insert($temp_array);
            if ($ret) {
                $this->success("添加成功");
            } else {
                $this->error("添加失败");
            }
        }else{
            $cat_list = $this->_getCategory(0, true);
            $this->assign("cat_list", $cat_list);
            return view("wdl_cate_add");
        }
    }


    /**
     * 删除商品分类
     */
    public function wdl_cate_del(){
        $ids = input("id",0,"int");
        $goods_list = Db::name("goods")->where("cate_id",$ids)->find();
        if(!empty($goods_list)){
            $this->error("分类下有商品，不可删除！");
        }
        $ret = Db::name("goods_category")->where("id",$ids)->delete();
        if($ret){
            $this->success("删除成功");
        }else{
            $this->error("删除失败");
        }
    }

    /**
     * 获得商品分类
     * @param int $id  指定id的下级
     * @param bool $isTree  是否返回树形结构
     */
    private function _getCategory($id=0,$isTree=false){
        $list = Db::name("goods_category")->field('id,pid,name')->select();
        if ($isTree) {
            $tree = Tree::instance();
            $tree->init(collection($list)->toArray(), 'pid');
            $list = $tree->getTreeList($tree->getTreeArray(0), 'name');
            foreach ($list as &$item) {
                //$item = str_replace('&nbsp;', ' ', $item);
            }
            unset($item);
        }
        return $list;
    }

    /**
     * 更新商品sku信息
     * @param string|array $sku_data sku数据
     * @param int $goods_id
     * @return bool
     */
    private function _updateSkuData($sku_data,$goods_id){
        $time = time();
        if(!is_array($sku_data)){
            $sku_data = json_decode($sku_data, true);
        }
        $ret = Db::name("goods_sku")->where("goods_id",$goods_id)->delete();
        if($ret===false){
            return false;
        }
        $sku_data = array_map(function ($item) use($goods_id,$time){
            $item["goods_id"] = $goods_id;
            $item["create_time"] = $time;

            return $item;
        },$sku_data);
        $ret2 = Db::name("goods_sku")->strict(false)->insertAll($sku_data);
        if($ret2 === false){
            return false;
        }
        return true;
    }
}