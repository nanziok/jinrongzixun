<?php
namespace app\api\controller;
use think\Db;
use think\Cookie;
use think\db\exception\DataNotFoundException;
use think\exception\PDOException;
use think\Session;
use think\Request;
use think\Exception;
use EasyWeChat\Factory;
/**
 * @title 用户中心
 * @description 接口说明
 */
class User extends Api{
    public $user_id;

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->user_id = $this->user_token->user_id;
    }

    /**
     * @title 获得用户信息
     * @description 获得用户新消息
     * @author 开发者
     * @url /api/user/getUserInfo
     * @method get
     * @return nickname:
     * @return headimg:http...xxx.png
     * @return status:1
     * @return phone:12312345678
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getUserInfo(){
        $user_info = Db::name("user")->where("id",$this->user_id)->field("nickname,headimg,status,phone")->find();
        $this->createSuccess($user_info,"获取用户信息成功");
    }

    /**
     * @title 订单列表
     * @description 客户订单列表,详情页请传参引用,不再另外提供订单详情接口
     * @author mifan89
     * @url /api/user/orderList
     * @method get
     * @param name:page type:int require:0 default:1 desc:页码
     * @param name:page_size type:int require:0 default:1 desc:页长
     * @param name:status type:int require:0 default:0 desc:订单状态：0=全部，1=待付款，2=服务中，3=服务结束，4=已取消，5=退款中，6=已完成
     * @return list:列表项@
     * @list id:订单ID order_no:订单编号 price:订单总价 c_amount:应付款(优惠后) t_amount:实付款 payment_code:支付平台订单号 pay_type:支付方式 pay_type_text:支付方式(文字说明) pay_time:支付时间戳(秒) create_time:订单生成时间 coupon_id:优惠券ID service_text:咨询师名 service_timeout:咨询有效期 status:订单状态 status_text:订单状态(文字说明)
     */
    public function orderList(){
        $page = input("page", 1, "int");
        $page_size = input("page_size", 10, "int");
        $status = input("status",  0, "int");
        if(in_array($status, ['1,2'])){
            $map["status"] = ["eq", $status];
        }
        $list = Db::name("order")->where($map)
            ->field("id,order_no,price,c_amount,t_amount,payment_code,pay_time,create_time,coupon_id,service_text,service_timeout")
            ->page($page,$page_size)
            ->select();
        $status_list = $this->orderStatusList();
        $pay_type_list = $this->orderStatusList();
        $list = array_map(function ($item) use ($status_list,$pay_type_list){
            $item["status_text"] = $status_list[$item["status"]];
            $item["pay_type_text"] = $pay_type_list[$item["pay_type"]];
            return $item;
        },$list);
        $this->createSuccess(compact("list"),"获取订单列表成功");
    }

    /**
     * @title 咨询档案列表
     * @description 咨询档案，就是每次提交kyc的答复信息，我也不知道为什么这么设计
     * @author mifan89
     * @url /api/user/testLogList
     * @method get
     * @param name:page type:int require:0 default:1 desc:页码
     * @param name:page_size type:int require:0 default:1 desc:页长
     * @return list:列表项@
     * @list id:档案ID service_text:咨询师名 create_time:创建时间戳(秒) review_time:档案生成时间戳(秒)
     */
    public function testLogList(){
        $page = input("page", 1, "int");
        $page_size = input("page_size", 10, "int");
        $list = Db::name("service_test_log")->where("status", 2)
            ->field("id,service_text,create_time,review_time")
            ->order("id desc")
            ->page($page,$page_size)
            ->select();
        $list = array_map(function ($item){

            return $item;
        },$list);
        $this->createSuccess(compact("list"),"获取咨询档案成功");
    }

    /**
     * @title 我的kyc列表
     * @description  kyc列表，产品图展示两个，可能是为了配合重新提交问卷功能
     * @author mifan89
     * @url /api/user/kycList
     * @method get
     * @param name:page type:int require:0 default:1 desc:页码
     * @param name:page_size type:int require:0 default:1 desc:页长
     * @return list:列表项@
     * @list id:档案ID tech_id:咨询师ID（用于获取问卷） order_id:订单id（用于获取&提交问卷） name:咨询师名 create_time:创建时间戳(秒) name:当前状态（已筛选三种状态：2=服务中心，3=服务结束，6=已完成）
     */
    public function kycList(){
        $page = input("page", 1, "int");
        $page_size = input("page_size", 10, "int");
        $map = [
            "o.status" => ["in", [2,3,6]]
        ];
        $field = "o.create_time,o.status,s.name,s.tags,s.id as tech_id";
        $list = Db::name("order")->alias("o")
            ->join("service s", "s.id=o.service_id", "left")
            ->where($map)
            ->field($field)
            ->order("o.id desc")
            ->page($page, $page_size);
        $this->createSuccess(compact("list"),"获取kyc列表成功");
    }

    /**
     * @title 获取我的消息
     * @description 通过http获取消息，包含未读消息和已读消息，每类消息显示最近一条
     * @author mifan89
     * @url /api/user/myMsg
     * @mrthod get
     */
    public function myMsg(){
        $list = Db::name("user_msg")->where("id", "in", function ($query){
            $query->table("ke_user_msg")->where()->group("type");
        })->where("user_id", $this->user_id)
            ->select();
        $this->createSuccess(compact("list"),"获取消息");
    }

    /**
     * @title 设置已读消息
     * @description 展示消息的时候调用
     * @author mifan89
     * @url /api/user/readMyMsg
     * @mrthod get
     * @param name:ids type:string require:1 default: desc:消息ids，多个半角逗号分隔
     */
    public function readMyMsg(){
        $ids = input("ids","");
        $ret = Db::name("user_msg")->where("id","int",explode(",",$ids))->update(["id_read"=>1]);
        if($ret === false){
            $this->createError("设置已读失败");
        }else{
            $this->createSuccess("", "设置已读失败");
        }
    }

    /**
     * @title 获取分享规则（文本）
     * @description 获取分享规则（文本）
     * @author none
     * @url /api/user/getShareContent
     * @method get
     * @return content:分享规则（文本）@
     */
    public function getShareContent(){
        $content = Db::name("xitong")->where("id",1)->value("");
        $this->createSuccess(compact("content"),"");
    }

    /**
     * @title 获取推广成功列表
     * @description 获取通过我的二维码注册的人员列表
     * @author mifan89
     * @url /api/user/getPromotionList
     * @method get
     * @param name:page type:int require:0 default:1 desc:页码
     * @param name:page_size type:int require:0 default:1 desc:页长
     * @return list:推广成员列表@
     * @list nickname:昵称（敏感信息已隐藏） create_time:邀请时间戳（秒）
     */
    public function getPromotionList(){
        $page = input("page", 1, "int");
        $page_size = input("page_size", 10, "int");
        $list = Db::name("user")->where("from_id", $this->user_id)->field("nickname,create_time")->page($page,$page_size)->select();
        $list = array_map(function ($item){
            $item["nickname"] = mb_substr($item["nickname"],0,1) . '***' . mb_substr($item["nickname"],-1);
            return $item;
        },$list);
        $this->createSuccess(compact("list"), "获取推广成功列表成功");
    }

    /**
     * @title 用户邀请码
     * @description 生成小程序码,页面地址可携带参数，以供二维码落地页使用
     * @author none
     * @url /api/user/getShareImg
     * @method get
     * @return pic:/public_html...png
     */
    public function getShareImg(){
        $path = input("path","");
        $config = Db::name("xitong")->where("id",1)->find();
        $options = [
            'app_id'    => $config["wechat_mp_appid"],
            'secret'    => $config["wechat_mp_secret"],
            'response_type' =>  'array',
            'log' => [
                'level' => 'debug',
                'file'  => RUNTIME_PATH . 'log/'.date('Ymd').'/wechat_debug.log',
            ],
        ];
        $file_name = 'share_' . $this->user_id . '.png';
        if(file_exists(ROOT_PATH . '/public_html/uploads/uQrcode' . DS . $file_name)){
            $this->createSuccess(["pic"=>'/public_html/uploads/uQrcode/'.$file_name],"获取小程序码成功");
        }
        try {
            $app = Factory::miniProgram($options);
            $response = $app->app_code->getQrCode($path, 150);

            if ($response instanceof \EasyWeChat\Kernel\Http\StreamResponse) {
                $filename = $response->saveAs(ROOT_PATH . '/public_html/uploads/uQrcode', $file_name);
            }
            $this->createSuccess(["pic"=>'/public_html/uploads/uQrcode/'.$file_name],"获取小程序码成功");
        }catch (Exception $e){
            $this->createError("生成小程序吗失败".$e->getMessage());
        }
    }

    /**
     * @title 生成订单
     * @description 用户下单
     * @author 不存在
     * @param name:tech_id type:int require:1 default:0 desc:咨询师字段，默认0基金咨询
     * @param name:coupon_id type:int require:0 default:0 desc:优惠券id,付款前可更改
     */
    public function creatOrder(){
        $service_id = input("tech_id", 0,"int");
        $coupon_id = input("coupon_id", 0,"int");
        $service_info = Db::name("service")->where("id","$service_id")->where("status",1)->find();
        if(empty($service_info)) $this->createError("选择的咨询师不存在或者不可用");
        $temp_data = [
            "order_no"  =>  $this->getOrderNo(2),
            "user_id"   =>  $this->user_id,
            "service_id"=>  $service_id,
            "price"     =>  $service_info["price"],
            "c_amount"  =>  $service_info["price"],
            "t_amount"  =>  0,
            "pay_type"  =>  "wechat",
            "payment_code" =>  "",
            "coupon_id" =>  $coupon_id,
            "status"    =>  "1",
            "create_time"=> time()
        ];
        $ret = Db::name("order")->insert($temp_data);
        if($ret === false){
            $this->createError("生成订单失败");
        }else{
            $this->createSuccess("", "生成订单成功");
        }
    }

    /**
     * @title 订单详情
     * @description 获取订单详情，应用场景：对未付款订单重新付款，对应用优惠券订单刷新
     * @author mifan89
     * @url /api/user/orderInfo
     * @method get
     * @param name:order_id type:int require:1 desc:订单id
     * @return id:ID
     * @return order_no:订单编号
     */
    public function orderInfo(){
        $order_id = input("order_id",0,"int");
        if($order_id > 0) {
            $info = Db::name("order")->where("id", $order_id)->find();
            $this->createSuccess($info,"获取订单详情");
        }
        $this->createError("获取订单详情失败");
    }

    /**
     * @title 订单发起支付
     * @description 订单发起支付
     * @author mifan89
     * @url /ap/user/pay
     * @method get
     * @param name:order_id type:int require:1 default: desc:订单id
     * @param name:pay_type type:string require:0 default:wechat desc:支付方式
     */
    public function pay(){
        $order_id = input("order_id", 0,"int");
        $order_info = Db::name("order")->where("id", $order_id)->find();
        $sys_config = Db::name("xitong")->where("id",1)->field("wechat_pay_appid,wechat_pay_merchant,wechat_pay_key")->find();
        $openid = $this->getOpenid();
        $config = [
            // 必要配置
            'app_id'             => $sys_config['wechat_pay_appid'],
            'mch_id'             => $sys_config['wechat_pay_merchant'],
            'key'                => $sys_config['wechat_pay_key']
        ];
        try {
            $app = Factory::payment($config);
            $jssdk = $app->jssdk;
            $result = $app->order->unify([
                'body' => '咨询服务费',
                'out_trade_no' => $order_info["order_no"],
                'total_fee' => $order_info["c_amount"],
                'notify_url' => $this->getHost() . '/index.php/api/pay/wxNotify', // 支付结果通知网址，如果不设置则会使用配置里的默认地址
                'trade_type' => 'JSAPI', // 请对应换成你的支付方式对应的值类型
                'openid' => $openid,
            ]);
            if ($result['return_code'] == 'SUCCESS' && $result['result_code'] == 'SUCCESS') {
                $config = $jssdk->sdkConfig($result['prepay_id']);
                $this->createSuccess($config,"发起微信支付");
            }else if ($result['return_code'] == 'FAIL' && array_key_exists('return_msg', $result)){
                $this->createError('请求微信服务器失败：'.$result['return_msg']);
            }
            $this->createError('发生意外错误');
        }catch (Exception $e){
            $this->createError("订单发起支付失败");
        }
    }


    /**
     * @title 优惠券列表
     * @description 查看用户的优惠券列表
     * @author mifan89
     * @url /api/user/couponList
     * @method get
     * @param name:page_size type:int require:0 default:10 desc:页大小
     * @param name:page type:int require:0 default:1 desc:页码
     * @param name:status require:0 default:0 desc:状态：0=全部，1=未使用，2=已使用，3=已过期
     * @return list:优惠券列表@
     * @list id:ID name:优惠券名 status:优惠券状态 type:优惠券类型 fee:优惠券面值 rule:优惠券规则（格式：50-5,即满50减5） create_time:赠送时间
     */
    public function couponList(){
        $page_size = input("page_size", 10, "int");
        $page = input("page", 1, "int");
        $list = Db::name("user_coupon")->where("user_id", $this->user_id)->order("id desc")->page($page,$page_size);

        $this->createSuccess(compact("list"),"优惠券列表");
    }
    /**
     * @title 使用优惠券
     * @description 对已有订单使用优惠券
     * @author 不知道
     * @url /api/user/useCoupon
     * @method get
     * @param name:order_id require:1 default:0 desc:订单id
     * @param name：coupon_id require:1 default:0 desc:优惠券id
     */
    public function useCoupon(){
        $order_id = input("order_id",0,"int");
        $coupon_id = input("coupon_id", 0, "int");
        if($order_id<1 || $coupon_id<1){
            $this->createError("提交参数有误");
        }
        try {
            $map = [
                "id"      => $coupon_id,
                "user_id" => $this->user_id,
                "status"  => 1,
            ];
            $coupon_info = Db::name("user_coupon")->where($map)->findOrFail();
            $order_info = Db::name("order")->where("id",$order_id)->findOrFail();
            if($coupon_info["type"] == 1){
                $coupon_rule = explode("-", $coupon_info["rule"]);
                if($order_info["price"] <$coupon_info[0] ){
                    throw new Exception("优惠券不满足使用条件");
                }
            }
            $ret = Db::name("order")->where("id",$order_id)->update(["coupon_id"=>$coupon_id, "c_amount"=>bcsub($order_info["price"],$coupon_info["fee"], 2)]);
            if($ret === false){
                $this->createError("应用优惠券失败");
            }else{
                $this->createSuccess("应用优惠券成功");
            }
        }catch (Exception $e){
            $this->createError("优惠券不满足使用条件");
        }catch (DataNotFoundException $e){
            $this->createError("查找信息失败");
        }catch (PDOException $e){
            $this->createError("数据库操作失败");
        }

    }

    /**
     * @title 获取问卷
     * @description 1:使用这个接口前务必判断登陆态，登陆之后才能使用 2:咨询师和问卷是一对多，所以返回的是权重最大的一个
     * @auth 不知道
     * @url /api/user/getTestPaper
     * @method get
     * @param name:tech_id type:int require:1 default: other: desc:咨询师id
     * @return id:问卷id
     * @return service_id:咨询师ID
     * @return name:问卷标题
     * @return content:问卷内容@
     * @content xuhao:序号(int) type:类型[radio|checkbox] timu:题目(string)    tinei:选项(回车分割字符串)
     */
    public function getTestPaper(){
        $service_id = input("tech_id");
        $info = Db::name("service_test")->where("service_id", $service_id)->where("status", 1)->find("id,service_id,name,content")->order("weigh desc")->find();
        if(empty($info)){
            $this->createError("获取问卷失败");
        }
        $this->createSuccess($info,"获取问卷成功");
    }

    /**
     * @title 提交问卷
     * @description 和获取问卷类似
     * @author mifan89
     * @url /api/user/postTestPaper
     * @method get
     * @param name:test_id require:1 default: desc:问卷id
     * @param name:order_id require:1 default: desc:订单id
     * @param name:content require:1 default: desc:试卷内容，和获取问卷的content结构类似，每一题添加answer=int[]字段
     */
    public function postTestPaper($msg = '')
    {
        $test_id = input("test_id", 0,"int");
        $order_id = input("order_id", 0,"int");
        $content = input("content", "");

        $test_info = Db::name("service_test")->where("id",$test_id)->find();
        if(empty($test_info)){
            $this->createError("提交数据不合法");
        }
        $this->checkOrder($order_id);
        $this->checkTestData($content);
        $temp_data = [
            "user_id"   =>   $this->user_id,
            "order_id"  =>   $order_id,
            "service_id"=>   $test_info["service_id"],
            "service_test_id" => $test_id,
            "content" => $content,
            "notes"   => "",
            "create_time"=> time(),
            "status"  =>  1
        ];
        $ret = Db::name("service_test_log")->insert($temp_data);
        if($ret === false){
            $this->createError("提交失败");
        }else{
            $this->success("提交成功");
        }
    }


    /**
     * 虽然有安全问题，就这样吧
     * @param $data
     */
    private function checkTestData($data) {
        try {
            if(!is_array($data)){
                $data = json_decode($data, true);
            }
            foreach ($data as $val){
                if(empty($val["timu"]) || empty($val["tinei"]) || empty($val["answer"])){
                    throw new Exception("数据校验失败");
                }
//                if(count(explode(PHP_EOL, $val["tinei"]))>1 ||)
            }

        }catch (Exception $e){
            $this->createError("数据校验失败, 请检查是否有未作答的题目");
        }

    }

    /**
     * 检查订单和问卷发起人是否一致
     * @param int $order_id
     */
    private function checkOrder($order_id=0){
        $order_id = $order_id ?: input("order_id", 0,"int");
        if($order_id>0){
            $map = [
                "user_id"  =>  $this->user_id,
                "id"       =>  $order_id
            ];
            $info = Db::name("order")->where($map)->find();
            if(empty($info)){
                $this->createError("提交数据不合法");
            }
        }

    }

    /**
     * 生成订单编号
     * @param int type 1=数字加字母，2=纯数字
     * @return string
     * @throws Exception
     */
    private function getOrderNo($type=1){

        $return = date('Ymd');
        $return = $this->getStringRand(6,1);
        $ret = Db::name("order")->where("order_no",$return)->find();
        if(empty($ret)){
            return $return;
        }else{
            return $this->getOrderNo($type);
        }
    }

    private function orderStatusList(){
        return [
            "1"  => "待付款",
            "2"  => "服务中",
            "3"  => "服务结束",
            "4"  => "已取消",
            "5"  => "退款中",
            "6"  => "已完成",
        ];
    }

    private function orderPayTypeList(){
        return [
            "wechat"  =>  "微信",
        ];
    }

}