<?php


namespace app\api\controller;


use think\Controller;
use EasyWeChat\Factory;
use think\Db;
use think\Exception;
use think\Hook;
use think\Queue;

/**
 * @title 登录接口
 * @description 接口说明
 * Class Login
 * @package app\api\controller
 */
class Login extends Controller
{
    public $app;
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $config = Db::name("xitong")->where("id",1)->find();
        $options = [
            'app_id'    => $config["wechat_mp_appid"],
            'secret'    => $config["wechat_mp_secret"],
            'response_type' =>  'array',
            'log' => [
                'level' => 'debug',
                'file'  => RUNTIME_PATH . 'log/'.date('Ymd').'/wechat_debug.log',
            ],
        ];
        $this->app = Factory::miniProgram($options);
    }

    /**
     * @title 微信小程序登录
     * @description 小程序段调用wx.login(),wx.getUserInfo()之后，发起登陆
     * @url /api/login/login
     * @author 开发者
     * @method POST
     * @param name:code type:string require:1 default: other: desc:wx.login()接口获得code
     * @param name:iv type:string require:1 default: other: desc:wx.getUserInfo()接口获得
     * @param name:rawData type:string require:1 default: other: desc:wx.getUserInfo()接口获得
     * @param name:signature type:string require:1 default: other: desc:wx.getUserInfo()接口获得
     * @param name:encryptedData type:string require:1 default: other: desc:wx.getUserInfo()接口获得加密字符串
     * @param name:inviteCode type:int require:0 default:0 other desc:邀请码，邀请人的id
     * @throws \EasyWeChat\Kernel\Exceptions\DecryptException
     * @throws \EasyWeChat\Kernel\Exceptions\InvalidConfigException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function login(){
        $js_code = input("jscode","");
        $rawData = input("rawDat","");
        $sessionKey = input("sessionKey","");
        $encryptedData = input('encryptedData');
        $iv = input("in","");
        $signature = input("signature","");
        $inviteCode = input("inviteCode",0, "int");
        try{
            Db::startTrans();
            //判断邀请人是否存在 ? 是不是应该判断
            $invite_user_info = Db::name("user")->where("id",$inviteCode)->find();
            if(empty($invite_user_info)){
                $inviteCode = 0;   //？？？？？？？？
                throw new Exception("邀请人信息有误");
            }
            $session = $this->app->auth->session($js_code);
            if($session["code "]!=0){
                throw new Exception("获得session_key失败");
            }
            $signature2 = sha1($rawData . $sessionKey);
            if ($signature2 !== $signature) {
                throw new Exception("验签失败");
            }
            $userInfo = $this->app->encryptor->decryptData($session['session_key'], $iv, $encryptedData);
            $temp_array = [
                "openid"   =>  $userInfo["openId"],
                "unionid"  =>  in_array("unionid",$userInfo) ? $userInfo["unionid"] : "",
                "platform" =>  'wxmp',
                "user_info" =>  json_encode($userInfo),
                "create_time" =>  time()
            ];
            $if_exist = Db::name("third")->where("openid",$temp_array["openid"])->where("platform",$temp_array["platform"])->find();
            if(empty($if_exist)) {
                //创建新用户
                $user_new = [
                    "phone"=>"",
                    "password"=>$this->getRandStr(8),
                    "headimg"=> $userInfo["avatarUrl"],
                    "username"=> "",
                    "realname"=> "",
//                    "sex"=> "",
//                    "age"=> "",
                    "status"=>1,
                    "from_id"=>$inviteCode,
                    "add_time"=>time()
                ];
                $user_id = Db::name("user")->insertGetId($user_new);
                if($user_id ===  false){
                    throw new Exception("创建新用户失败");
                }
                Db::name("user")->where("id",$user_id)->update(["username"=>'u'.$user_id]);
                $temp_array["user_id"] = $user_id;
                $ret = Db::name("third")->insert($temp_array);
                if ($ret === false) {
                    throw new Exception("存储三方登录信息失败");
                }
                //新增token
                $ret_token = Db::name("token")->insert([
                    "user_id"  =>  $user_id,
                    "token"  =>  $this->create_token(18, 'u'.$user_id),
                    "expires_in" =>  30*24*60*60,
                    "create_time" => time()
                ]);
                if ($ret_token === false){
                    throw new Exception("更新token失败");
                }
            }else{
                //更新并返回
                $user_id = $if_exist["user_id"];
                $user_name = Db::name("user")->where("id", $user_id)->value("username");
                $new_token = $this->create_token(18, $user_name);
                $ret_token = Db::name("token")->where("user_id", $user_id)->updat(["token"=>$new_token,"create_time"=>time()]);
                if ($ret_token === false){
                    throw new Exception("更新token失败");
                }
            }
            $user_info = Db::name("user")->alias("u")
                ->join("ke_user_token t","t.user_id=u.id","left")
                ->where("u.id",$user_id)
                ->field("u.*,t.token")
                ->find();
            Db::commit();
            $params = [
                "from_id" => $inviteCode,
            ];
            Queue::push("app\job\User@userInvite",$params);
            $this->result($user_info,1,'登录成功','json');
        }catch (Exception $e){
            Db::rollback();
            $this->result("",0,"登录失败".$e->getMessage(),'json');
        }
    }

    /**
     * 获得指定长度随机字符串
     * @param $len
     * @return string
     */
    private function getRandStr($len) {
        $chars = array("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k","l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v","w", "x", "y", "z","0", "1", "2","3", "4", "5", "6", "7", "8", "9");
        $charsLen = count($chars) - 1;
        shuffle($chars);
        $output = "";
        for ($i=0; $i<$len; $i++){
            $output .= $chars[mt_rand(0, $charsLen)];
        }
        return $output;
    }
    /**
     * 生成token
     * @param int $length
     * @param string $user_name
     * @return false|string
     */
    public function create_token($length=18, $user_name=""){
        return substr(md5($user_name . time()),3, $length);
    }
}